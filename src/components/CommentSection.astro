---
interface Props {
  uri: string;
}

interface BlueskyPost {
  post: {
    author: {
      avatar: string;
      displayName: string;
      handle: string;
    };
    record: {
      text: string;
    };
    indexedAt: string;
    likeCount: number;
    repostCount: number;
    replyCount: number;
  };
  replies?: BlueskyPost[];
}
console.log('CommentSection component is loading:', new Date().toLocaleString());
// Retry fetch function
async function fetchWithRetry(endpoint: string, retries = 3) {
  for (let i = 0; i < retries; i++) {
    try {
      console.log(`Attempt ${i + 1} of ${retries}`);
      const response = await fetch(endpoint, {
        method: 'GET',
        headers: {
          'Accept': 'application/json'
        }
      });
      console.log('Response status:', response.status);
      if (response.ok) return response;
      console.log(`Attempt ${i + 1} failed with status:`, response.status);
    } catch (e) {
      console.error(`Attempt ${i + 1} failed with error:`, e);
      if (i === retries - 1) throw e;
      const waitTime = 1000 * (i + 1);
      console.log(`Waiting ${waitTime}ms before retry...`);
      await new Promise(r => setTimeout(r, waitTime));
    }
  }
  throw new Error('All retry attempts failed');
}

const { uri } = Astro.props;

// Get the post ID for the Bluesky link
const postId = uri.split('/').pop();
const blueskyLink = `https://bsky.app/profile/${uri.split('/')[2]}/post/${postId}`;

let comments: BlueskyPost[] = [];
let error = null;

if (uri) {
  try {
    console.log('Starting fetch for comments at:', new Date().toLocaleString());
    console.log('URI being used:', uri);
    
    const endpoint = `https://api.bsky.app/xrpc/app.bsky.feed.getPostThread?uri=${encodeURIComponent(uri)}&depth=1000&parentHeight=80`;
    console.log('Endpoint:', endpoint);
    
    const response = await fetchWithRetry(endpoint);
    const responseText = await response.text();
    console.log('Raw response:', responseText);
    
    const data = JSON.parse(responseText);
    console.log('Parsed data:', data);
    
    if (data.thread?.replies) {
      comments = data.thread.replies;
      console.log('Comments loaded:', comments.length);
    } else {
      console.log('No replies found in response');
    }
  } catch (e) {
    error = e.message;
    console.error('Error in comment fetching:', e);
  }
}
---

<div class="comments-section">
  <h2>Comments</h2>
  <p class="comment-prompt">
    Reply on Bluesky <a href={blueskyLink} target="_blank" rel="noopener noreferrer">here</a> to join the conversation.
  </p>
  
  {error && <p class="error">Error loading comments: {error}</p>}
  
  {!error && comments.length === 0 && (
    <p class="no-comments">No comments yet. Be the first to comment!</p>
  )}

  {!error && comments.length > 0 && (
    <div class="comments-list">
      {comments.map((comment) => (
        <div class={`comment ${comment.replies?.length ? 'has-replies' : ''}`}>
          <div class="comment-header">
            <img src={comment.post.author.avatar} alt={`${comment.post.author.displayName}'s avatar`} class="avatar" />
            <div class="author-info">
              <span class="author-name">{comment.post.author.displayName}</span>
              <span class="author-handle">@{comment.post.author.handle}</span>
            </div>
          </div>
          <div class="comment-content">
            {comment.post.record.text}
          </div>
          <div class="comment-footer">
            <div class="interaction-counts">
              <span title="Replies">{comment.post.replyCount || 0} üí¨</span>
              <span title="Reposts">{comment.post.repostCount || 0} üîÅ</span>
              <span title="Likes">{comment.post.likeCount || 0} ‚ù§Ô∏è</span>
            </div>
            <time datetime={comment.post.indexedAt}>
              {new Date(comment.post.indexedAt).toLocaleDateString()}
            </time>
          </div>
          {comment.replies && comment.replies.length > 0 && (
            <div class="replies">
              {comment.replies.map((reply) => (
                <div class="reply comment">
                  <div class="comment-header">
                    <img src={reply.post.author.avatar} alt={`${reply.post.author.displayName}'s avatar`} class="avatar" />
                    <div class="author-info">
                      <span class="author-name">{reply.post.author.displayName}</span>
                      <span class="author-handle">@{reply.post.author.handle}</span>
                    </div>
                  </div>
                  <div class="comment-content">
                    {reply.post.record.text}
                  </div>
                  <div class="comment-footer">
                    <div class="interaction-counts">
                      <span title="Replies">{reply.post.replyCount || 0} üí¨</span>
                      <span title="Reposts">{reply.post.repostCount || 0} üîÅ</span>
                      <span title="Likes">{reply.post.likeCount || 0} ‚ù§Ô∏è</span>
                    </div>
                    <time datetime={reply.post.indexedAt}>
                      {new Date(reply.post.indexedAt).toLocaleDateString()}
                    </time>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      ))}
    </div>
  )}
</div>

<style>
  /* Existing styles remain the same */
  .comments-section {
    margin-top: 1rem;
    padding-top: 1rem;
    border-top: 1px solid var(--gray);
    font-size: 0.9rem;
  }

  h2 {
    margin-bottom: 1rem;
    font-size: 1.5rem;
  }

  .comment-prompt {
    margin-bottom: 2rem;
    color: var(--gray);
  }

  .comment-prompt a {
    color: var(--black);
    text-decoration: underline;
  }

  @media (prefers-color-scheme: dark) {
    .comment-prompt a {
      color: var(--white);
    }
  }

  .comments-list {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .comment {
    position: relative;
    padding: 0.75rem;
    background: var(--moretranswhite);
    border-radius: 8px;
  }

  .replies {
    margin-left: 1.5rem;
    margin-top: 0.75rem;
    padding-left: 0.75rem;
    border-left: 2px solid var(--gray);
  }

  .reply {
    margin-top: 0.75rem;
  }

  .comment-header {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 0.5rem;
  }

  .avatar {
    width: 32px;
    height: 32px;
    border-radius: 50%;
  }

  .author-info {
    display: flex;
    flex-direction: column;
  }

  .author-name {
    font-weight: 500;
  }

  .author-handle {
    font-size: 0.8rem;
    color: var(--gray);
  }

  .comment-content {
    margin: 0.5rem 0;
    line-height: 1.5;
  }

  .comment-footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 0.5rem;
    font-size: 0.8rem;
    color: var(--gray);
  }

  .interaction-counts {
    display: flex;
    gap: 1rem;
  }

  .interaction-counts span {
    cursor: default;
  }

  .error {
    color: var(--red);
    padding: 1rem;
    background: var(--moretranswhite);
    border-radius: 4px;
  }

  .no-comments {
    text-align: center;
    color: var(--gray);
    padding: 1rem;
  }

  @media (max-width: 600px) {
    .comment {
      padding: 0.75rem;
    }
    
    .interaction-counts {
      gap: 0.5rem;
    }
  }
</style>